#!/usr/bin/env node

// BEGIN: Copyright
// Copyright (C) 2019 Rector and Visitors of the University of Virginia
// All rights reserved
// END: Copyright

// BEGIN: License
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// END: License

const pkg = require('../package.json');
const cfg = require('../config.json');
const commander = require('commander');
const Ajv = require('ajv');
const path = require('path');
const fs = require('fs');

let files;

commander
    .version(pkg.version)
    .description('EpiHiper Schema Validation')
    .usage('[options] <file ...>')
    .option('-s --schema <schema>', 'Use the specified schema validation')
    .option('--no-default', 'Do not add defaults for missing values')
    .arguments('<files...>')
    .action(function(_files) {
      files = _files;
    });

commander.parse(process.argv);

if (!Array.isArray(files)) {
  commander.help();
  app.exit(1);
}

const currDir = process.cwd();
const ajv = new Ajv({schemaId: 'auto'});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));

cfg.schema.forEach(function(s) {
  const sInstance = require(path.join(__dirname, '..', 'schema', s));
  sInstance['$id'] = 'file://' + s;
  ajv.addSchema(sInstance);
});

if (!commander.schema) {
  commander.schema = '$schema';
}

files.forEach(function(file) {
  const InstanceFile = path.join(currDir, file);
  process.stdout.write('File: ' + InstanceFile);
  const Instance = require(InstanceFile);

  let SchemaFile = commander.schema;
  const SchemaRelDir = path.dirname(InstanceFile);

  if (SchemaFile == '$schema') {
    SchemaFile = path.join(SchemaRelDir, Instance['$schema']);
  } else {
    SchemaFile = path.join(currDir, SchemaFile);
  }

  // Check whether we have the schema already loaded
  Id = 'file://' + SchemaFile.replace(path.join(__dirname, '..', 'schema'), '.');

  let validate = ajv.getSchema(Id);

  if (typeof validate === 'undefined') {
    console.log(SchemaFile);

    if (!fs.existsSync(SchemaFile)) {
      throw new Error('Schema: ' + SchemaFile + ' not found.');
    }

    const sInstance = require(SchemaFile);
    sInstance['$id'] = Id;
    ajv.addSchema(sInstance);

    validate = ajv.getSchema(Id);

    if (typeof validate === 'undefined') {
      throw new Error('Schema: ' + SchemaFile + ' invalid');
    }
  }

  const valid = validate(Instance);

  if (!valid) {
    console.log(' invalid');
    console.log(validate.errors);
  } else {
    console.log(' valid');
  }
  // console.log(SchemaInstance);
});
