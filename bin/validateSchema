#!/usr/bin/env node

// BEGIN: Copyright
// Copyright (C) 2019 Rector and Visitors of the University of Virginia
// All rights reserved
// END: Copyright

// BEGIN: License
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// END: License

const pkg = require('../package.json');
const validateSchema = require('commander');
const Ajv = require('ajv');
const path = require('path');

let files;

validateSchema
    .version(pkg.version)
    .description('EpiHiper Schema Validation')
    .usage('[options] <file ...>')
    .option('-s --schema <schema>', 'Use the specified schema validation')
    .option('--no-default', 'Do not add defaults for missing values')
    .arguments('<files...>')
    .action(function(file) {
      files = file;
    });

validateSchema.parse(process.argv);

if (!Array.isArray(files)) {
  validateSchema.help();
  applicationCache.exit(1);
}

const currDir = process.cwd();
const ajv = new Ajv({schemaId: 'auto'});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));

const schema = [
  {
    '$id': './diseaseModelSchema.json',
  },
  {
    '$id': './initializationSchema.json',
  },
  {
    '$id': './interventionSchema.json',
  },
  {
    '$id': './interventionTemplateSchema.json',
  },
  {
    '$id': './mergedSchema.json',
  },
  {
    '$id': './runParametersSchema.json',
  },
  {
    '$id': './traitsSchema.json',
  },
  {
    '$id': './typeRegistry.json',
  },
  {
    '$id': './personTraitDB/schemas/tabular-data-resource.json',
  },
  {
    '$id': './personTraitDB/schemas/dictionary.json',
  }];


schema.forEach(function(s) {
  const sInstance = require(path.join(__dirname, '..', 'schema', s['$id']));
  sInstance['$id'] = 'file://' + s['$id'];
  ajv.addSchema(sInstance);
});

if (!validateSchema.schema) {
  validateSchema.schema = '$schema';
}

files.forEach(function(file) {
  const InstanceFile = path.join(currDir, file);
  process.stdout.write('File: ' + InstanceFile);
  const Instance = require(InstanceFile);

  let SchemaFile = validateSchema.schema;
  const SchemaRelDir = path.dirname(InstanceFile);

  if (SchemaFile == '$schema') {
    SchemaFile = path.join(SchemaRelDir, Instance['$schema']);
  } else {
    SchemaFile = path.join(currDir, SchemaFile);
  }

  // Check whether we have the schema already loaded
  Id = 'file://' + SchemaFile.replace(path.join(__dirname, '..', 'schema'), '.');

  const validate = ajv.getSchema(Id);
  const valid = validate(Instance);

  if (!valid) {
    console.log(' invalid');
    console.log(validate.errors);
  } else {
    console.log(' valid');
  }
  // console.log(SchemaInstance);
});
