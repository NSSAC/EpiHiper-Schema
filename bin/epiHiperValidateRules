#!/usr/bin/env node

// BEGIN: Copyright
// Copyright (C) 2019 Rector and Visitors of the University of Virginia
// All rights reserved
// END: Copyright

// BEGIN: License
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// END: License

const pkg = require('../package.json');
const cfg = require('../config.json');
const commander = require('commander');
const jsontron = require('@shoops/jsontron');
const path = require('path');
const fs = require('fs');

let files;

commander
    .version(pkg.version)
    .description('EpiHiper Rules Validation')
    .usage('[options] <file ...>')
    .option('--rules-dir <rules-dir>', 'Use the rules in the provided directory instead of the internal ones.')
    .arguments('<files...>')
    .action(function(_files) {
      files = _files;
    });

commander.parse(process.argv);

if (!Array.isArray(files)) {
  commander.help();
  process.exit(1);
}

if (!commander.rulesDir) {
  commander.rulesDir = path.join(__dirname, '..', 'schema');
}

const currDir = process.cwd();
const rules = {};

cfg.schema.forEach(function(s) {
  const RulesFile = path.join(commander.rulesDir,
      s.replace('Schema.json', 'Rules.json'));

  if (RulesFile.endsWith('Rules.json') && fs.existsSync(RulesFile)) {
    rules[s.replace('Schema.json', 'Rules.json')] = require(RulesFile);
  }
});

files.forEach(function(file) {
  const InstanceFile = path.join(currDir, file);
  const Instance = require(InstanceFile);

  const RulesFile = path.basename(Instance['$schema'].replace('Schema.json', 'Rules.json'));

  // Check whether we have the rules already loaded
  const Rules = rules[RulesFile];

  if (typeof Rules === 'undefined') {
    console.log('File: ' + InstanceFile + ' no rules provided');
    return;
  }

  Report = jsontron.JSONTRON.validate(Instance, Rules);

  if (Report.finalValidationReport.length) {
    console.log('File: ' + InstanceFile + ' invalid');
    console.log(Report.finalValidationReport);
  } else {
    console.log('File: ' + InstanceFile + ' valid');
  }
});
