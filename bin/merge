#!/usr/bin/env node

// BEGIN: Copyright
// Copyright (C) 2019 Rector and Visitors of the University of Virginia
// All rights reserved
// END: Copyright

// BEGIN: License
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// END: License

const pkg = require('../package.json');
const commander = require('commander');
const EpiHiperMerger = require('../lib/epiHiperMerger');

let files;

commander
    .version(pkg.version)
    .description('EpiHiper Merge Files')
    .usage('[options] <file ...>')
    .option('-o --output <output>', 'Save result in the output file instead to std::out.')
    .option('--no-default', 'Do not add defaults for missing values')
    .option('--recursive', 'Process files referenced in run parameters')
    .arguments('<files...>')
    .action(function(_files) {
      files = _files;
    });

commander.parse(process.argv);

if (!Array.isArray(files)) {
  commander.help();
  process.exit(1);
}

const epiHiperMerger = new EpiHiperMerger(commander.rulesDir);

const merged = {};
merged.diseaseModel = {};
merged.sets = [];
merged.globalVariables = [];
merged.initialization = [];
merged.interventions = [];
merged.traits = [];
merged.personTraitDBs = [];
merged.runParameters = {};

files.forEach(function(file) {
  epiHiperMerger.merge(epiHiperMerger.epiHiperValidator.load(file));
});

process.stdout.write('Merged Instance');
validate = ajv.getSchema('file://./mergedSchema.json');

valid = validate(merged);

if (!valid) {
  console.log(' invalid');
  console.log(validate.errors);
} else {
  console.log(' valid');
}

console.log(merged);

process.exit(0);

/**
 * Check whether the given object is empty.
 * @param {object} obj
 * @return {Boolean} isEmpty
 */
function isEmpty(obj) {
  return (Object.keys(obj).length === 0 && obj.constructor === Object);
}
/**
 * Adds the disease model to the merged EpiHiper input.
 * @param {object} diseaseModel
 * @return {void}
 */
function addDiseaseModel(diseaseModel) {
  if (typeof diseaseModel === 'undefined') return;

  if (! isEmpty(merged.diseaseModel)) {
    throw new Error('Merging of disease model is not supported.');
  }

  merged.diseaseModel = diseaseModel;
};

/**
 * Adds sets to the merged EpiHiper input.
 * @param {object} sets
 * @return {void}
 */
function addSets(sets) {
  if (!Array.isArray(sets)) return;

  sets.forEach(function(set) {
    merged.sets.push(set);
  });
};

/**
 * Adds gobalVariables to the merged EpiHiper input.
 * @param {object} gobalVariables
 * @return {void}
 */
function addGlobalVariables(gobalVariables) {
  if (!Array.isArray(gobalVariables)) return;

  gobalVariables.forEach(function(gobalVariable) {
    merged.gobalVariables.push(gobalVariable);
  });
};

/**
 * Adds initializations to the merged EpiHiper input.
 * @param {object} initializations
 * @return {void}
 */
function addInitializations(initializations) {
  if (!Array.isArray(initializations)) return;

  initializations.forEach(function(initialization) {
    merged.initializations.push(initialization);
  });
};

/**
 * Adds interventions to the merged EpiHiper input.
 * @param {object} interventions
 * @return {void}
 */
function addInterventions(interventions) {
  if (!Array.isArray(interventions)) return;

  interventions.forEach(function(intervention) {
    merged.interventions.push(intervention);
  });
};

/**
 * Adds traits to the merged EpiHiper input.
 * @param {object} traits
 * @return {void}
 */
function addTraits(traits) {
  if (!Array.isArray(traits)) return;

  traits.forEach(function(trait) {
    merged.traits.push(trait);
  });
};

/**
 * Adds personTraitDBs to the merged EpiHiper input.
 * @param {object} personTraitDBs
 * @return {void}
 */
function addPersonTraitDBs(personTraitDBs) {
  if (!Array.isArray(personTraitDBs)) return;

  personTraitDBs.forEach(function(personTraitDB) {
    merged.personTraitDBs.push(personTraitDB);
  });
};

/**
 * Adds the run parameters to the merged EpiHiper input.
 * @param {object} runParameters
 * @return {void}
 */
function addRunParameters(runParameters) {
  if (typeof runParameters === 'undefined') return;

  if (! isEmpty(merged.runParameters)) {
    throw new Error('Merging of run parameters is not supported.');
  }

  merged.runParameters = runParameters;
};
