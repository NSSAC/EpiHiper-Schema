#!/usr/bin/env node

// BEGIN: Copyright
// Copyright (C) 2019 Rector and Visitors of the University of Virginia
// All rights reserved
// END: Copyright

// BEGIN: License
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// END: License

const pkg = require('../package.json');
const cfg = require('../config.json');
const commander = require('commander');
const Ajv = require('ajv');
const path = require('path');

let files;

commander
    .version(pkg.version)
    .description('EpiHiper Schema Validation')
    .usage('[options] <file ...>')
    .option('--schema-dir <schema-dir>', 'Use the schemas in the provided directory instead of the internal ones.')
    // .option('--no-default', 'Do not add defaults for missing values')
    .arguments('<files...>')
    .action(function(_files) {
      files = _files;
    });

commander.parse(process.argv);

if (!Array.isArray(files)) {
  commander.help();
  process.exit(1);
}

const currDir = process.cwd();
const ajv = new Ajv({schemaId: 'auto'});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));

if (!commander.schemaDir) {
  commander.schemaDir = path.join(__dirname, '..', 'schema');
}

cfg.schema.forEach(function(s) {
  const sInstance = require(path.join(commander.schemaDir, s));
  sInstance['$id'] = 'file://./' + s;
  ajv.addSchema(sInstance);
});


files.forEach(function(file) {
  const InstanceFile = path.join(currDir, file);
  process.stdout.write('File: ' + InstanceFile);
  const Instance = require(InstanceFile);

  const Id = 'file://./' + path.basename(Instance['$schema']);

  // Check whether we have the schema already loaded
  const validate = ajv.getSchema(Id);

  if (typeof validate === 'undefined') {
    throw new Error('Schema: ' + Instance['$schema'] + ' not found.');
  }

  const valid = validate(Instance);

  if (!valid) {
    console.log(' invalid');
    console.log(validate.errors);
  } else {
    console.log(' valid');
  }
});
